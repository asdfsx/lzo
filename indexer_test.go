package lzo

import (
	"bytes"
	"encoding/binary"
	"io"
	"os"
	"testing"
)

var result = []byte{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x78, 0xEC,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF7, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x67, 0x64,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDE, 0xA7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x4C, 0xBF,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0xDC, 0xB7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x57, 0x2B,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0xD3, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x55, 0x87,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xD0, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x4E, 0x0F,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1D, 0xCB, 0x52,
}

//mention: the lzo file is created by the command lzop, not the lzo build by this package
func TestLzoindexer(t *testing.T) {
	lzofile, err := os.Open("./testdata/pg135.txt.lzo")
	defer lzofile.Close()
	if err != nil {
		t.Fatal(err)
	}

	indexer, err := NewIndexer(lzofile)
	defer indexer.Close()
	for {
		indexer.findBlock()
		if indexer.err != nil {
			break
		}
	}

	buf := new(bytes.Buffer)

	if indexer.err == io.EOF {
		for _, num := range indexer.indexes {
			binary.Write(buf, binary.BigEndian, num)
		}
	}

	if !bytes.Equal(buf.Bytes(), result) {
		t.Fatal("not equal")
	}
}
